<?php

namespace App\Commands;

use Hleb\Base\Task;
use App\Services\TelegramBotService;

class SetupTelegramWebhookCommand extends Task
{
    /** php console setup-telegram-webhook-command [action] **/

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –¥–ª—è Telegram –±–æ—Ç–∞
     * –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: set, delete, info, commands, test
     * 
     * @param string|null $action - –¥–µ–π—Å—Ç–≤–∏–µ (set|delete|info|commands|test), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'set'
     * 
     * @return int - –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     */
    protected function run(?string $action = 'set'): int
    {
        $action = $action ?? 'set';
        
        try {
            $botService = new TelegramBotService();
            
            switch ($action) {
                case 'set':
                    return $this->setWebhook($botService);
                
                case 'delete':
                    return $this->deleteWebhook($botService);
                
                case 'info':
                    return $this->getWebhookInfo($botService);
                
                case 'commands':
                    return $this->setBotCommands($botService);
                
                case 'test':
                    return $this->testBot($botService);
                
                default:
                    $this->showHelp();
                    return self::ERROR_CODE;
            }
        } catch (\Exception $e) {
            $this->error("–û—à–∏–±–∫–∞: " . $e->getMessage());
            return self::ERROR_CODE;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
     */
    private function setWebhook(TelegramBotService $botService): int
    {
        $webhookUrl = $this->getWebhookUrl();
        
        if (!$webhookUrl) {
            $this->error("–ù–µ —É–∫–∞–∑–∞–Ω WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            return self::ERROR_CODE;
        }

        $this->info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: " . $webhookUrl);

        $options = [
            'max_connections' => 40,
            'allowed_updates' => ['message', 'callback_query', 'pre_checkout_query'],
            'drop_pending_updates' => true,
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º secret token –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        $secretToken = $_ENV['TELEGRAM_WEBHOOK_SECRET'] ?? null;
        if ($secretToken) {
            $options['secret_token'] = $secretToken;
            $this->info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è secret token –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
        }

        $result = $botService->setWebhook($webhookUrl, $options);

        if ($result['ok']) {
            $this->success("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            $this->info("URL: " . $webhookUrl);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            $this->line("");
            $this->getWebhookInfo($botService);
            
            return self::SUCCESS_CODE;
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: " . ($result['description'] ?? 'Unknown error'));
            return self::ERROR_CODE;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ webhook
     */
    private function deleteWebhook(TelegramBotService $botService): int
    {
        $this->info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...");

        $result = $botService->deleteWebhook(true);

        if ($result['ok']) {
            $this->success("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            return self::SUCCESS_CODE;
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: " . ($result['description'] ?? 'Unknown error'));
            return self::ERROR_CODE;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
     */
    private function getWebhookInfo(TelegramBotService $botService): int
    {
        $this->info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...");

        $result = $botService->getWebhookInfo();

        if ($result['ok']) {
            $info = $result['result'];
            
            $this->line("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:");
            $this->line("URL: " . ($info['url'] ?: '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL: " . ($info['has_custom_certificate'] ? '–¥–∞' : '–Ω–µ—Ç'));
            $this->line("–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " . $info['pending_update_count']);
            $this->line("IP –∞–¥—Ä–µ—Å: " . ($info['ip_address'] ?? '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'));
            $this->line("–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " . ($info['max_connections'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'));
            $this->line("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " . json_encode($info['allowed_updates'] ?? []));
            
            if (isset($info['last_error_date'])) {
                $this->line("–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: " . date('Y-m-d H:i:s', $info['last_error_date']));
                $this->line("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: " . ($info['last_error_message'] ?? ''));
            }
            
            return self::SUCCESS_CODE;
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " . ($result['description'] ?? 'Unknown error'));
            return self::ERROR_CODE;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
     */
    private function setBotCommands(TelegramBotService $botService): int
    {
        $this->info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...");

        $commands = [
            ['command' => 'start', 'description' => '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ['command' => 'help', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'],
            ['command' => 'catalog', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'],
            ['command' => 'cart', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É'],
            ['command' => 'orders', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤'],
        ];

        $result = $botService->setMyCommands($commands);

        if ($result['ok']) {
            $this->success("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
            $this->line("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
            foreach ($commands as $command) {
                $this->line("  /{$command['command']} - {$command['description']}");
            }
            return self::SUCCESS_CODE;
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: " . ($result['description'] ?? 'Unknown error'));
            return self::ERROR_CODE;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
     */
    private function testBot(TelegramBotService $botService): int
    {
        $this->info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if (!$botService->validateToken()) {
            $this->error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!");
            return self::ERROR_CODE;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        $result = $botService->getMe();
        
        if ($result['ok']) {
            $bot = $result['result'];
            $this->success("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            $this->line("–ò–º—è: " . $bot['first_name']);
            $this->line("Username: @" . $bot['username']);
            $this->line("ID: " . $bot['id']);
            $this->line("–ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: " . ($bot['can_join_groups'] ? '–¥–∞' : '–Ω–µ—Ç'));
            $this->line("–ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " . ($bot['can_read_all_group_messages'] ? '–¥–∞' : '–Ω–µ—Ç'));
            $this->line("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline —Ä–µ–∂–∏–º: " . ($bot['supports_inline_queries'] ? '–¥–∞' : '–Ω–µ—Ç'));
            return self::SUCCESS_CODE;
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: " . ($result['description'] ?? 'Unknown error'));
            return self::ERROR_CODE;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è webhook
     */
    private function getWebhookUrl(): ?string
    {
        $baseUrl = $_ENV['WEBHOOK_URL'] ?? $_ENV['APP_URL'] ?? null;
        
        if (!$baseUrl) {
            return null;
        }

        return rtrim($baseUrl, '/') . '/telegram/webhook';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    private function showHelp(): void
    {
        $this->line("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram webhook");
        $this->line("");
        $this->line("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
        $this->line("  php console setup-telegram-webhook-command [action]");
        $this->line("");
        $this->line("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:");
        $this->line("  set      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
        $this->line("  delete   - –£–¥–∞–ª–∏—Ç—å webhook");
        $this->line("  info     - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook");
        $this->line("  commands - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞");
        $this->line("  test     - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞");
        $this->line("");
        $this->line("–ü—Ä–∏–º–µ—Ä—ã:");
        $this->line("  php console setup-telegram-webhook-command set");
        $this->line("  php console setup-telegram-webhook-command delete");
        $this->line("  php console setup-telegram-webhook-command info");
        $this->line("");
        $this->line("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
        $this->line("  TELEGRAM_BOT_TOKEN    - –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)");
        $this->line("  WEBHOOK_URL –∏–ª–∏ APP_URL - –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è webhook");
        $this->line("  TELEGRAM_WEBHOOK_SECRET - Secret token –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)");
    }

    /**
     * –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function info(string $message): void
    {
        echo "\033[36m[INFO]\033[0m " . $message . "\n";
    }

    /**
     * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    private function success(string $message): void
    {
        echo "\033[32m[SUCCESS]\033[0m " . $message . "\n";
    }

    /**
     * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    private function error(string $message): void
    {
        echo "\033[31m[ERROR]\033[0m " . $message . "\n";
    }

    /**
     * –í—ã–≤–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function line(string $message): void
    {
        echo $message . "\n";
    }


}