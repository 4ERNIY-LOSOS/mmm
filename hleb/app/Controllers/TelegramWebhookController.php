<?php

namespace App\Controllers;

use Hleb\Base\Controller;
use Hleb\Static\Request;
use Hleb\Static\Response;
use App\Services\TelegramBotService;

class TelegramWebhookController extends Controller
{
    private TelegramBotService $botService;

    public function __construct()
    {
        $this->botService = new TelegramBotService();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
     */
    public function handle(): string
    {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        $input = Request::getBody();
        $update = json_decode($input, true);

        if (!$update) {
            Response::setStatus(400);
            return json_encode(['error' => 'Invalid JSON']);
        }

        try {
            $this->processUpdate($update);
            return json_encode(['ok' => true]);
        } catch (\Exception $e) {
            error_log('Telegram webhook error: ' . $e->getMessage());
            Response::setStatus(500);
            return json_encode(['error' => 'Internal server error']);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
     */
    private function processUpdate(array $update): void
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (isset($update['message'])) {
            $this->handleMessage($update['message']);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        if (isset($update['callback_query'])) {
            $this->handleCallbackQuery($update['callback_query']);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)
        if (isset($update['pre_checkout_query'])) {
            $this->handlePreCheckoutQuery($update['pre_checkout_query']);
            return;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage(array $message): void
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $userId = $message['from']['id'];
        $username = $message['from']['username'] ?? '';
        $firstName = $message['from']['first_name'] ?? '';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –≤ –ë–î)
        $userInfo = [
            'user_id' => $userId,
            'username' => $username,
            'first_name' => $firstName,
            'chat_id' => $chatId
        ];

        switch ($text) {
            case '/start':
                $this->handleStartCommand($chatId, $userInfo);
                break;
            
            case '/help':
                $this->handleHelpCommand($chatId);
                break;
            
            case '/catalog':
                $this->handleCatalogCommand($chatId);
                break;
            
            case '/cart':
                $this->handleCartCommand($chatId);
                break;
            
            case '/orders':
                $this->handleOrdersCommand($chatId);
                break;
            
            default:
                $this->handleUnknownCommand($chatId, $text);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private function handleStartCommand(int $chatId, array $userInfo): void
    {
        $welcomeText = "üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n\n";
        $welcomeText .= "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'web_app' => ['url' => $this->getWebAppUrl()]]
                ],
                [
                    ['text' => 'üì± –ö–∞—Ç–∞–ª–æ–≥', 'callback_data' => 'catalog'],
                    ['text' => 'üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞', 'callback_data' => 'cart']
                ],
                [
                    ['text' => 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'callback_data' => 'orders'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å', 'callback_data' => 'help']
                ]
            ]
        ];

        $this->botService->sendMessage($chatId, $welcomeText, $keyboard);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
     */
    private function handleHelpCommand(int $chatId): void
    {
        $helpText = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
        $helpText .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
        $helpText .= "/catalog - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n";
        $helpText .= "/cart - –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n";
        $helpText .= "/orders - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n";
        $helpText .= "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
        $helpText .= "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!";

        $this->botService->sendMessage($chatId, $helpText);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /catalog
     */
    private function handleCatalogCommand(int $chatId): void
    {
        $catalogText = "üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n";
        $catalogText .= "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n";
        $catalogText .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤!";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'web_app' => ['url' => $this->getWebAppUrl()]]
                ],
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_menu']
                ]
            ]
        ];

        $this->botService->sendMessage($chatId, $catalogText, $keyboard);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cart
     */
    private function handleCartCommand(int $chatId): void
    {
        $cartText = "üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n";
        $cartText .= "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n";
        $cartText .= "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'web_app' => ['url' => $this->getWebAppUrl()]]
                ],
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_menu']
                ]
            ]
        ];

        $this->botService->sendMessage($chatId, $cartText, $keyboard);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /orders
     */
    private function handleOrdersCommand(int $chatId): void
    {
        $ordersText = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n";
        $ordersText .= "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n";
        $ordersText .= "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'web_app' => ['url' => $this->getWebAppUrl()]]
                ],
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_menu']
                ]
            ]
        ];

        $this->botService->sendMessage($chatId, $ordersText, $keyboard);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    private function handleUnknownCommand(int $chatId, string $text): void
    {
        $responseText = "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n";
        $responseText .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.";

        $this->botService->sendMessage($chatId, $responseText);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
     */
    private function handleCallbackQuery(array $callbackQuery): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $messageId = $callbackQuery['message']['message_id'];
        $data = $callbackQuery['callback_data'];
        $callbackQueryId = $callbackQuery['id'];

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        $this->botService->answerCallbackQuery($callbackQueryId);

        switch ($data) {
            case 'catalog':
                $this->handleCatalogCommand($chatId);
                break;
            
            case 'cart':
                $this->handleCartCommand($chatId);
                break;
            
            case 'orders':
                $this->handleOrdersCommand($chatId);
                break;
            
            case 'help':
                $this->handleHelpCommand($chatId);
                break;
            
            case 'back_to_menu':
                $this->handleStartCommand($chatId, []);
                break;
            
            default:
                $this->botService->sendMessage($chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " . $data);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)
     */
    private function handlePreCheckoutQuery(array $preCheckoutQuery): void
    {
        $preCheckoutQueryId = $preCheckoutQuery['id'];
        
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        $this->botService->answerPreCheckoutQuery($preCheckoutQueryId, true);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è Web App
     */
    private function getWebAppUrl(): string
    {
        $baseUrl = $_ENV['MINI_APP_BASE_URL'] ?? 'https://your-domain.com';
        return $baseUrl . '/shop';
    }
}